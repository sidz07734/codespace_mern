# GitLab CI/CD Configuration for CodeSpace MERN Application

stages:
  - install
  - test
  - quality
  - build
  - security
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

# Global cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - backend/node_modules/
    - frontend/node_modules/
    - .npm/

# Install dependencies stage
install:backend:
  stage: install
  image: node:${NODE_VERSION}-alpine
  script:
    - cd backend
    - npm ci --cache .npm --prefer-offline
  artifacts:
    expire_in: 1 hour
    paths:
      - backend/node_modules/

install:frontend:
  stage: install
  image: node:${NODE_VERSION}-alpine
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
  artifacts:
    expire_in: 1 hour
    paths:
      - frontend/node_modules/

# Testing stage
test:backend:
  stage: test
  image: node:${NODE_VERSION}
  needs: ["install:backend"]
  services:
    - mongo:7.0
  variables:
    MONGODB_URI: "mongodb://mongo:27017/codespace_test"
    JWT_SECRET: "test_secret_key"
    NODE_ENV: "test"
  script:
    - cd backend
    - npm test -- --coverage --ci --reporters=default --reporters=jest-junit
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
    expire_in: 1 week
    paths:
      - backend/coverage/

test:frontend:
  stage: test
  image: node:${NODE_VERSION}
  needs: ["install:frontend"]
  script:
    - cd frontend
    - npm test -- --coverage --watchAll=false --ci --reporters=default --reporters=jest-junit
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    expire_in: 1 week
    paths:
      - frontend/coverage/

# Code quality stage
lint:backend:
  stage: quality
  image: node:${NODE_VERSION}-alpine
  needs: ["install:backend"]
  script:
    - cd backend
    - npm run lint
  allow_failure: true

lint:frontend:
  stage: quality
  image: node:${NODE_VERSION}-alpine
  needs: ["install:frontend"]
  script:
    - cd frontend
    - npm run lint
  allow_failure: true

sonarqube:
  stage: quality
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  needs: ["test:backend", "test:frontend"]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
      -Dsonar.projectKey=codespace-mern
      -Dsonar.projectName="CodeSpace MERN"
      -Dsonar.sources=backend/,frontend/src/
      -Dsonar.exclusions=**/node_modules/**,**/coverage/**,**/*.test.js,**/build/**
      -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
      -Dsonar.testExecutionReportPaths=backend/junit.xml,frontend/junit.xml
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.qualitygate.wait=true
  only:
    - merge_requests
    - main
    - develop

# Build stage
build:backend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  needs: ["test:backend"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.backend -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  only:
    - main
    - develop
    - tags

build:frontend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  needs: ["test:frontend"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.frontend -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main
    - develop
    - tags

# Security scanning stage
security:dependencies:
  stage: security
  image: node:${NODE_VERSION}
  needs: ["install:backend", "install:frontend"]
  script:
    - npm install -g npm-audit-html
    - cd backend && npm audit --json | npm-audit-html -o npm-audit-backend.html || true
    - cd ../frontend && npm audit --json | npm-audit-html -o npm-audit-frontend.html || true
  artifacts:
    when: always
    paths:
      - backend/npm-audit-backend.html
      - frontend/npm-audit-frontend.html
    expire_in: 1 week
  allow_failure: true

security:container:
  stage: security
  image: docker:24-dind
  services:
    - docker:24-dind
  needs: ["build:backend", "build:frontend"]
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --format gitlab
      --output gl-container-scanning-backend.json
      $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --format gitlab
      --output gl-container-scanning-frontend.json
      $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
  artifacts:
    when: always
    reports:
      container_scanning:
        - gl-container-scanning-backend.json
        - gl-container-scanning-frontend.json
    expire_in: 1 week

security:secrets:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog git file://. --since-commit HEAD~5 --only-verified --json > secrets-report.json || true
  artifacts:
    when: always
    paths:
      - secrets-report.json
    expire_in: 1 week
  allow_failure: true

# Deployment stage
.deploy_template: &deploy_template
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts

deploy:staging:
  <<: *deploy_template
  needs: ["build:backend", "build:frontend", "security:container"]
  variables:
    DEPLOY_HOST: $STAGING_HOST
    DEPLOY_USER: $STAGING_USER
    SSH_PRIVATE_KEY: $STAGING_SSH_KEY
  script:
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << EOF
        cd /opt/codespace
        export COMPOSE_PROJECT_NAME=codespace-staging
        export IMAGE_TAG=$CI_COMMIT_SHA
        docker-compose pull
        docker-compose up -d
        docker system prune -f
        echo "Deployment completed at $(date)"
      EOF
  environment:
    name: staging
    url: https://staging.codespace.com
  only:
    - develop

deploy:production:
  <<: *deploy_template
  needs: ["build:backend", "build:frontend", "security:container"]
  variables:
    DEPLOY_HOST: $PRODUCTION_HOST
    DEPLOY_USER: $PRODUCTION_USER
    SSH_PRIVATE_KEY: $PRODUCTION_SSH_KEY
  script:
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << EOF
        cd /opt/codespace
        export COMPOSE_PROJECT_NAME=codespace-production
        export IMAGE_TAG=$CI_COMMIT_SHA
        
        # Backup current state
        docker-compose exec -T mongodb mongodump --out=/backup/$(date +%Y%m%d_%H%M%S)
        
        # Deploy new version
        docker-compose pull
        docker-compose up -d --no-deps --scale backend=2 backend
        sleep 30
        docker-compose up -d
        
        # Cleanup old containers
        docker system prune -f
        echo "Production deployment completed at $(date)"
      EOF
  environment:
    name: production
    url: https://codespace.com
  when: manual
  only:
    - main
    - tags

# Rollback job
rollback:production:
  <<: *deploy_template
  stage: deploy
  needs: []
  variables:
    DEPLOY_HOST: $PRODUCTION_HOST
    DEPLOY_USER: $PRODUCTION_USER
    SSH_PRIVATE_KEY: $PRODUCTION_SSH_KEY
  script:
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << EOF
        cd /opt/codespace
        export COMPOSE_PROJECT_NAME=codespace-production
        export IMAGE_TAG=$ROLLBACK_TAG
        
        docker-compose pull
        docker-compose up -d
        echo "Rollback to $ROLLBACK_TAG completed at $(date)"
      EOF
  environment:
    name: production
    url: https://codespace.com
  when: manual
  only:
    - main

# Performance testing (optional)
performance:
  stage: deploy
  image: loadimpact/k6:latest
  needs: ["deploy:staging"]
  script:
    - echo "Running performance tests..."
    - k6 run --out json=performance-report.json tests/performance/load-test.js || true
  artifacts:
    when: always
    paths:
      - performance-report.json
    expire_in: 1 week
  only:
    - develop
  allow_failure: true

# Cleanup old images
cleanup:registry:
  stage: deploy
  image: alpine:latest
  needs: []
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      # Clean up old images (keep last 10)
      echo "Cleaning up old Docker images..."
      # Add your registry cleanup logic here
  when: manual
  only:
    - schedules

# Pages job for test reports
pages:
  stage: deploy
  dependencies:
    - test:backend
    - test:frontend
  script:
    - mkdir -p public
    - cp -r backend/coverage/* public/ || true
    - cp -r frontend/coverage/* public/ || true
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - main